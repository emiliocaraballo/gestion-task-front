@use '../../../../../styles/variables' as v;
@use '../../../../../styles/mixins' as m;

.todo-form {
  background: v.$surface;
  padding: map-get(v.$spacing, 6);
  border-radius: v.$border-radius-xl;
  box-shadow: v.$shadow-lg;
  border: 1px solid v.$gray-200;
  margin-bottom: map-get(v.$spacing, 7);
  position: relative;
  overflow: hidden;
  
  // Subtle gradient overlay
  &::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 3px;
    background: v.$gradient-primary;
  }
  
  @include m.media-query(sm) {
    padding: map-get(v.$spacing, 7);
  }
}

.form-group {
  margin-bottom: map-get(v.$spacing, 5);

  &:last-of-type {
    margin-bottom: map-get(v.$spacing, 6);
  }

  .form-label {
    display: block;
    margin-bottom: map-get(v.$spacing, 2);
    color: v.$text-primary;
    font-weight: 600;
    font-size: map-get(v.$font-size, sm);
    letter-spacing: 0.025em;
    text-transform: uppercase;
  }

  .form-control {
    width: 100%;
    padding: map-get(v.$spacing, 4);
    border: 2px solid v.$gray-200;
    border-radius: v.$border-radius-lg;
    font-size: map-get(v.$font-size, base);
    font-family: v.$font-family-base;
    background: v.$white;
    transition: v.$transition-base;
    position: relative;

    &::placeholder {
      color: v.$text-hint;
      font-weight: 400;
    }

    &:focus {
      outline: none;
      border-color: v.$primary;
      box-shadow: 0 0 0 3px rgba(v.$primary, 0.1);
      background: v.$white;
    }

    &:hover:not(:focus) {
      border-color: v.$gray-300;
    }

    &.is-invalid {
      border-color: v.$error;
      box-shadow: 0 0 0 3px rgba(v.$error, 0.1);
      
      &:focus {
        border-color: v.$error;
        box-shadow: 0 0 0 3px rgba(v.$error, 0.15);
      }
    }
  }

  textarea.form-control {
    min-height: 120px;
    resize: vertical;
    line-height: 1.6;
  }

  .error-feedback {
    margin-top: map-get(v.$spacing, 2);
    padding: map-get(v.$spacing, 2) map-get(v.$spacing, 3);
    background: rgba(v.$error, 0.05);
    border: 1px solid rgba(v.$error, 0.15);
    border-radius: v.$border-radius;
    color: v.$error;
    font-size: map-get(v.$font-size, sm);
    font-weight: 500;
    
    span {
      display: block;
      
      &:not(:last-child) {
        margin-bottom: map-get(v.$spacing, 1);
      }
    }
  }
}

.submit-btn {
  width: 100%;
  padding: map-get(v.$spacing, 4) map-get(v.$spacing, 6);
  background: v.$gradient-primary;
  color: v.$text-on-primary;
  border: none;
  border-radius: v.$border-radius-lg;
  font-size: map-get(v.$font-size, base);
  font-weight: 600;
  cursor: pointer;
  transition: v.$transition-base;
  box-shadow: v.$shadow;
  letter-spacing: 0.025em;
  position: relative;
  overflow: hidden;

  // Subtle shine effect
  &::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
    transition: left 0.5s;
  }

  &:hover:not(:disabled) {
    transform: translateY(-1px);
    box-shadow: v.$shadow-lg;
    
    &::before {
      left: 100%;
    }
  }

  &:active:not(:disabled) {
    transform: translateY(0);
    box-shadow: v.$shadow;
  }

  &:focus {
    outline: none;
    box-shadow: v.$shadow-lg, 0 0 0 3px rgba(v.$primary, 0.3);
  }

  &:disabled {
    background: v.$gray-300;
    color: v.$text-disabled;
    cursor: not-allowed;
    transform: none;
    box-shadow: none;
    
    &::before {
      display: none;
    }
  }
  
  @include m.media-query(sm) {
    padding: map-get(v.$spacing, 5) map-get(v.$spacing, 7);
    font-size: map-get(v.$font-size, lg);
  }
}

// Loading state (if needed in the future)
.submit-btn.loading {
  position: relative;
  color: transparent;
  
  &::after {
    content: '';
    position: absolute;
    width: 20px;
    height: 20px;
    top: 50%;
    left: 50%;
    margin-left: -10px;
    margin-top: -10px;
    border: 2px solid transparent;
    border-top-color: v.$white;
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}